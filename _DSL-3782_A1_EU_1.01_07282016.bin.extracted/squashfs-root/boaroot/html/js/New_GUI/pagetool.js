/* include menu.js */
document.write('<script type="text/javascript" charset="utf-8" src="/js/New_GUI/menu.js' + ini_ver + '"></script>');
/* include DetectRouterConnection.js */
document.write('<script type="text/javascript" charset="utf-8" src="/js/New_GUI/DetectRouterConnection.js' + ini_ver + '"></script>');

function CleanTable(tblID)
{
	table = document.getElementById(tblID);
	var rows = table.getElementsByTagName("tr");
	while (rows.length > 0) table.deleteRow(rows.length - 1);
}

function save_button_changed()
{
	changeFlag = true;
	document.getElementById("Save_Disable_btn").style.display = "none";
	document.getElementById("Save_btn").style.display = "block";
}

function SetCheckBoxEnable(id, init, ckstatus)
{
	var stren = m_comm_Enable1;
	var strdis = m_comm_disable1;
	SetCheckBox(id, stren, strdis, ckstatus, init);
}

function SetCheckBoxAllow(id, init, ckstatus)
{
	var stren = "Allowed";
	var strdis = "Blocked";
	
	SetCheckBox(id, stren, strdis, ckstatus, init);
}

function SetCheckBoxActivate(id, init, ckstatus)
{
	var stren = m_comm_act;
	var strdis = m_comm_dact;
	
	SetCheckBox(id, stren, strdis, ckstatus, init);
}

function SetCheckBox(id, stren, strdis, ckstatus, init)
{
	var checkbox = id+"_ck";
	var now_check;
	var status;
	if(init)
	{
		now_check = ckstatus;
		now_check?status=false:status=true;
	}
	else
	{
		now_check = document.getElementById(checkbox).checked;		
		now_check?status=true:status=false;		
		save_button_changed();
	}
	
	if(status)
	{	
		document.getElementById(id).className = "checkbox_off";
		document.getElementById(id).innerHTML = '<input type="checkbox" id="'+checkbox+'" name="'+checkbox+'" checked>'+strdis;
		document.getElementById(checkbox).checked = false;
	}
	else
	{	
		document.getElementById(id).className = "checkbox_on";
		document.getElementById(id).innerHTML = '<input type="checkbox" id="'+checkbox+'" name="'+checkbox+'" checked>'+stren;
		document.getElementById(checkbox).checked = true;
	}
}

/////////////////////////////////////////////////////////////////////
function presetCheckBox(id, ck) {
	var targetId = 	document.getElementById(id);
	var checkboxId =  id +'_ck';
	
	if(ck == true) {
		var enable = m_comm_enable;
	//	document.getElementById(checkboxId).checked = true;
		targetId.setAttribute("class", "checkbox_on");
		targetId.setAttribute("className", "checkbox_on");
		targetId.innerHTML='<input type="checkbox" name=' + id + ' id=' + checkboxId + ' checked>'+enable;
		document.getElementById(checkboxId).checked = true;
	}else {	
		var disable = m_comm_disenable;
	//	document.getElementById(checkboxId).checked = false;
		targetId.setAttribute("class", "checkbox_off");
		targetId.setAttribute("className", "checkbox_off");
		targetId.innerHTML='<input type="checkbox" name=' + id + ' id=' + checkboxId + ' checked>'+disable;
		document.getElementById(checkboxId).checked = false;
	}	
}
/////////////////////////////////////////////////////////////////////
function internetV7_showGeneral(sel) {
	//alert(sel);
	var MTU_StaticIP = document.getElementById("mtu_StaticIP");
	
	if(sel==0) {
		mtu_StaticIP_Manual.style.display = "none";
	}
	else{
		mtu_StaticIP_Manual.style.display = "inline";
	}

}

function showAdv(id) {
	var block = document.getElementById(id);
	//alert("showAdv1");
	if(block.style.display == "none" || block.style.display == "") {
		//alert("block");
		block.style.display = "block";
	} else {
		//alert("none");
		block.style.display = "none";
	}
	//alert("showAdv2");
}

function alwaysShowAdv(id) {
	var block = document.getElementById(id);
	block.style.display = "inline";
}

function showOnlineHelp(str)	
{
	/*
	var helpString = encodeURIComponent(str);
	var modelInfo = JSON.parse(sessionStorage.getItem('modelInfomation'));	
	var hwVer = modelInfo.hwVer.charAt(0) + "x";

	var helpURL = "http://dcms.dlink.com.tw/"+localStorage.language +"/" 
						+ modelInfo.modelName + "/" 
						+ hwVer + "/"
						+ currentDevice.helpVer +"/"
						+ helpString;
	*/
	var helpURL = currentDevice.helpURL;
	window.open(helpURL);	
}

function ajaxSubmit(frm, fn) {
	var dataPara = getFormJson(frm);
	$.ajax({
		url: frm.action,
		type: frm.method,
		data: dataPara,
		success: fn
	});
}
//将form中的值转换为键值对。
function getFormJson(frm) {
	var o = {};
	var a = $(frm).serializeArray();
	$.each(a, function () {
	if (o[this.name] !== undefined) {
	if (!o[this.name].push) {
	o[this.name] = [o[this.name]];
	}
	o[this.name].push(this.value || '');
	} else {
	o[this.name] = this.value || '';
	}
	});
	return o;
}
function is_valid_ip(ipaddr, optional)
{
	var ip = get_ip(ipaddr);

	if (optional!=0 && is_blank(ipaddr)) return true;
	if (is_in_range(ip[1], 1, 223)==false) return false;
	if (decstr2int(ip[1]) == 127) return false;
	if (is_in_range(ip[2], 0, 255)==false) return false;
	if (is_in_range(ip[3], 0, 255)==false) return false;
	if (is_in_range2(ip[4], 1, 255)==false) return false;

	ip[0] = parseInt(ip[1],[10])+"."+parseInt(ip[2],[10])+"."+parseInt(ip[3],[10])+"."+parseInt(ip[4],[10]);
	if (ip[0] != ipaddr) return false;

	return true;
}

function get_ip(str_ip)
{
	var myIP=new Array();

	myIP[0] = myIP[1] = myIP[2] = myIP[3] = myIP[4] = "";
	if (str_ip != "")
	{
		var tmp=str_ip.split(".");
		for (var i=1;i <= tmp.length;i++) myIP[i]=tmp[i-1];
		myIP[0]=str_ip;
	}
	else
	{
		for (var i=0; i <= 4;i++) myIP[i]="";
	}
	return myIP;
}

function is_in_range(str_val, min, max)
{
	var d = decstr2int(str_val);
	if ( d > max || d < min ) return false;
	return true;
}
function is_in_range2(str_val, min, max)
{
	var d = decstr2int(str_val);
	if ( d >= max || d < min ) return false;
	return true;
}

function decstr2int(str)
{
	var i = -1;
	if (is_digit(str)==true) i = parseInt(str, [10]);
	return i;
}

function is_digit(str)
{
	if (str.length==0) return false;
	for (var i=0;i < str.length;i++)
	{
		if (str.charAt(i) < '0' || str.charAt(i) > '9') return false;
	}
	return true;
}

function is_valid_mask(mask)
{
   var sMask=mask.split(".");

   if (sMask.length!=4) return false;

   for(var i=0; i< sMask.length; i++)
   {
      if (!is_digit(sMask[i])) return false;
      if (parseInt(sMask[i],10) < 0 || parseInt(sMask[i],10) > 255) return false;
   }

   for (var i =0 ; i< sMask.length; i++)
      sMask[i] = parseInt(sMask[i], 10);

   U32ip = sMask[0]*0x1000000+sMask[1]*0x10000+sMask[2]*0x100+sMask[3];

   if(U32ip==0) return false;

   for(var i=0; i<32;i++)
   {
      if(U32ip & (0x1<<i))
      {
         var myvalue = Math.pow(2,i)-1;
         myvalue = Math.pow(2,32) -1 -myvalue;

         if (myvalue == U32ip)
   			return true;
         else
            return false;
      }
   }
   return false;
}

function is_valid_ip2(ipaddr, netmask)
{
	var ip_broadcast = get_broadcast_ip(ipaddr, netmask);

	if(ip_broadcast[0] == ipaddr) return false;
	return true;
}

function get_broadcast_ip(ip, mask)
{
	var id = new Array();
	var ipaddr = get_ip(ip);
	var subnet = get_ip(mask);

	id[1] = ipaddr[1] | (subnet[1] ^ 255);
	id[2] = ipaddr[2] | (subnet[2] ^ 255);
	id[3] = ipaddr[3] | (subnet[3] ^ 255);
	id[4] = ipaddr[4] | (subnet[4] ^ 255);
	id[0] = id[1]+"."+id[2]+"."+id[3]+"."+id[4];
	return id;
}

function MathandAbs(ip) {
	var sIP=ip.split(".");
	absip = Math.abs(sIP[0])+"."+Math.abs(sIP[1])+"."+Math.abs(sIP[2])+"."+Math.abs(sIP[3]); 
	return absip;
}

function dx_alert_error_message( ctrl, msg)
{
	alert( msg);
	ctrl.focus();
	ctrl.select();
}

function isBlank(s){
	for (i=0; i < s.length;i++){
		if (s.charCodeAt(i)!=32) break;
	}
	return false;
}
function prints(context)
{	
	document.write(context);
}

function isUnsafeChar(cmpStr)
{
	var regStr=/[a-zA-Z0-9]/;
  	for(i=0;i<cmpStr.length;i++)
  	{ 
		if (cmpStr.charAt(i).search(regStr)==-1) //contain the unsafe char
			return false;
	}
	return true;	
}

/* 5 min Timeout logout */
var logouttime = 5;

var n = parseInt(logouttime) * 60 * 1000; //iMilliSeconds

if (logouttime >= 1) {
	var meizz;
	clearTimeout(meizz);
	if (self.location.href.indexOf('Wizard_Manual.asp') == -1)
		meizz = setTimeout("WebTimeoutToIndex()", n);
}

function WebTimeoutToIndex() {
	self.location.href = "/cgi-bin/time_out.asp";
}