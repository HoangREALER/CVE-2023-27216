function getIP(ip)
{
    var myIP=new Array();

    if ( ip != "")
    {	    
      var tmp=ip.split(".");
      for (var i=1;i <= tmp.length;i++)
      {
          myIP[i]=tmp[i-1];
      }
      myIP[0]=ip;
    }
    else
    {
      for (var i=1;i <= 4;i++)
      {
          myIP[i]="";
      }
      myIP[0]="";
    }
    return myIP;
}


function isValidIpAddr(ip1,ip2,ip3,ip4)
{
if(ip1==0 || ip4==0 || ip4==255 || ip1==127)	
	return false;			
return true;	
}

function valDoValidateIP(ctrl)
{
  var Address = ctrl.value;
  if(Address=="")
  {
  	return false;
  }
  var address = Address.match("^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$");
  var digits;
  if(address == null) 
  { 
  	return false;
  }
  else
  {
    digits = address[0].split(".");
    if(digits.length != 4)
    	return false;
    for(var i=0; i < 4; i++)
    {
      if((Number(digits[i]) > 255 ) || (Number(digits[i]) < 0 ) || (Number(digits[0]) > 223))
      { 
        return false;
      	break; 
      }
    }
    if(!isValidIpAddr(digits[0],digits[1],digits[2],digits[3]))
    {
    	return false;
    }
  }
  return true;
}
function doValidateDomain(domain)
{
	var intflag = 0;
	var dianflag = 0;
	var InValidIp=new Array("999.999.999.999","11.0.0.0","129.1.0.0","193.1.1.0","11.255.255.255","129.1.255.255","193.1.1.255","11.127.255.255","224.0.0.1","239.0.0.1","240.0.0.1","254.0.0.1","127.0.0.1");
	for(var i=0;i<InValidIp.length;i++)
	{
		if(domain.value == InValidIp[i])
			return false;
	}
	for (i=0;i<domain.value.length;i++)
    	{
		if(domain.value.charAt(i) == ".")
		{
			dianflag++;
			continue;
		}
		else
		{
			if (domain.value.charAt(i) < '0' || domain.value.charAt(i) > '9') 
				intflag++;
		}	
    	}
	if((dianflag == 3)&&(intflag == 0))//if the string only include number and the number of "." is 3,check it as ip.
	{
		if(!valDoValidateIP(domain))
			return false;
	}
	return true;
}
function IpBetween(Address, ip1start, ip1end, ip2start, ip2end)
{
    var inrange=1,inrange1=1,inrange2=1;
    
    var digits=ip1start.split(".");
  	var digite=ip1end.split(".");
	var digit=Address.split(".");
	if(ip2start == "" || ip2end == "")
	{
	    for ( var i=0;i<4;i++)
    	{
    		if( ( parseInt(digit[i]) < parseInt(digits[i]) ) || ( parseInt(digit[i]) > parseInt(digite[i]) ) )
    		{
    			inrange=0;
    			break;
    		}		
    	}
	}
    else
    {
    	var tmpdigits=ip2start.split(".");
  	    var tmpdigite=ip2end.split(".");   
    	
    	for ( var i=0;i<4;i++)
    	{
    		if( ( parseInt(digit[i]) < parseInt(digits[i]) ) || ( parseInt(digit[i]) > parseInt(tmpdigits[i]) ) )
    		{
    			inrange1=0;
    			break;
    		}		
    	}
    	for ( var i=0;i<4;i++)
    	{
    		if( ( parseInt(digit[i]) < parseInt(digite[i]) ) || ( parseInt(digit[i]) > parseInt(tmpdigite[i]) ) )
    		{
    			inrange2=0;
    			break;
    		}		
    	}
    	if(inrange1 == 0 && inrange2 == 0)
    	    inrange = 0;
    }
	if( inrange==0 )
		return false;
	else
		return true;	
	
}
function doValidateIpBetween(ctrl, ipstart, ipend, lanip)
{
  	var Address=ctrl.value;
  	var tmpIPEnd = "";
  	var tmpIPStart = "";
    var tmp = lanip.split(".");
    var msg1="";
	var msg2="";
    if(lanip == ipstart)
    {
        ipstart=tmp[0]+"."+tmp[1]+"."+tmp[2]+"."+(parseInt(tmp[3])+1);
        if( IpBetween(Address, ipstart, ipend, tmpIPStart, tmpIPEnd) ==false)
        {
            msg1 = m_ip_range +ipstart+" - "+ipend;
            dx_alert_error_message( ctrl, msg1);
            return false;
        }
    }
    else if(lanip == ipend)
    {
        ipend=tmp[0]+"."+tmp[1]+"."+tmp[2]+"."+(parseInt(tmp[3])-1);
        if (IpBetween(Address, ipstart, ipend, tmpIPStart, tmpIPEnd) ==false)
        {
            msg1 = m_ip_range +ipstart+" - "+ipend;
            dx_alert_error_message( ctrl, msg1);
            return false;
        }
    }		  
	else if(Address == lanip)	  
	{
		dx_alert_error_message( ctrl, "The Address can't equal lan ip");
	        return false;
	}
    else
    {
	    tmpIPEnd = tmp[0]+"."+tmp[1]+"."+tmp[2]+"."+(parseInt(tmp[3])+1);
	    tmpIPStart = tmp[0]+"."+tmp[1]+"."+tmp[2]+"."+(parseInt(tmp[3])-1);    			    
        if (IpBetween(Address, ipstart, tmpIPStart,tmpIPEnd,ipend) ==false)
        {
            if(ipstart == tmpIPStart)
                msg1 = m_ip_range +ipstart;
            else
                msg1 = m_ip_range +ipstart+" - "+tmpIPStart;
            if(tmpIPEnd == ipend)
    	        msg2 = m_or +tmpIPEnd;
    	    else
    	        msg2 = m_or +tmpIPEnd+" - "+ipend;
    	    dx_alert_error_message( ctrl, msg1+msg2);
            return false;
        }
    }
}

function Isnumber(ctrl, item)
{
	var Arg=ctrl.value;
	var msg;
	if (Arg=="")
	{
  		msg=item+ m_numeric;
  		dx_alert_error_message( ctrl, msg);
		return false;
	}
	
	var len=Arg.length;
	var re = new RegExp("^[0-9]{1,"+Arg.length+"}$", "g");
	if (!re.test(Arg))
	{
  		msg=item+ m_numeric;
  		dx_alert_error_message( ctrl, msg);
		return false;
	}
	else
	{
		return true;
	}
}


function doValidateMac(Address)
{
  var address=Address.match("^[0-9,a-f,A-F]{2}\:[0-9,a-f,A-F]{2}\:[0-9,a-f,A-F]{2}\:[0-9,a-f,A-F]{2}\:[0-9,a-f,A-F]{2}\:[0-9,a-f,A-F]{2}$");

  var digits;
  var i;

  if(address == null)
  {
     return false;
  }
  digits=address[0].split(":");
  if(digits.length != 6)
  {
     return false;
  }
  return true;
}

function doValidateMask(ctrl)
{
	var mask = ctrl.value.match("^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$");
	var digits;
	var bMask = 0;
	var watch = false;
	var i;

	if(mask == null)
	{ 
		return false; 
	}
	if(ctrl.value == "255.255.255.253" || ctrl.value == "0.0.0.0")
		return false; 
	digits = mask[0].split(".");
	
	if(digits.length != 4)
		return false;
	for(i=0; i < 4; i++)
	{
		if((Number(digits[i]) > 255 ) || (Number(digits[i]) < 0 ) ||  (Number(digits[i]) == 1 ))
		{
			return false;
		}
		bMask = (bMask << 8) | Number(digits[i]);
	}
	bMask = bMask & 0x0FFFFFFFF;
	for(i=0; i<32; i++)
	{
		if((watch==true) && ((bMask & 0x1)==0)) 
		{
			return false;
		}
		bMask = bMask >> 1;
		if((bMask & 0x01) == 1) 
			watch=true;
	}

	return true;
}



function doValidateRange(startCtrl,endCtrl)
{
	var startIP=startCtrl.value;
	var endIP=endCtrl.value;
	var staddress;
	var edaddress;
	var cnt;
	
	staddress=startIP.split(".");
	edaddress=endIP.split(".");
	for(cnt=0; cnt < 4; cnt++)
	{
        if(Number(staddress[cnt])<Number(edaddress[cnt]))
        	return true;
        if(Number(edaddress[cnt])<Number(staddress[cnt]))
        {
            dx_alert_error_message(startCtrl, m_end_less_start);
            return false;
         }
	}
	
	return true;
}

function dx_alert_error_message( ctrl, msg)
{
	alert( msg);
	ctrl.focus();
	ctrl.select();
}
