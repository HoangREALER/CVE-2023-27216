<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns= "http://www.w3c.org/1999/xhtml">

<head>
<title>D-LINK</title>
<meta http-equiv="X-UA-Compatible" content="IE=9">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Type" content="text/css">
<link rel=stylesheet type="text/css" href="/layout/New_GUI/jquery-ui.min.css?v=20141017135608" media="all" />
<script type="text/javascript" charset="utf-8" src="/js/New_GUI/jquery-1.8.2.min.js?v=20141017135608"></script>
<script type="text/javascript" charset="utf-8" src="/js/New_GUI/initialJS.js?v=20141017135608"></script>
<script type="text/javascript" charset="utf-8" src="/js/New_GUI/initialCSS.js??v=20141017135608"></script>
<script type="text/javascript" charset="utf-8" src="/js/New_GUI/DetectBrowserVersion.js?v=20141017135608"></script>
<script type="text/javascript" charset="utf-8" src="/js/New_GUI/jquery-ui.custom.min.js?v=20141017135608"></script>

<script type="text/javascript">
	var DetectBrowserMessage = 1;
	var GetDBV = DetectBrowserVersion();
	if (GetDBV[0] == "Microsoft Internet Explorer" && parseInt(GetDBV[1]) < 9)	{	DetectBrowserMessage = 0;	}
</script>
<script type="text/javascript">
	var allText = "";
	var arrayQoS2Dv;
	var array2Dv;

	var qos_data = {
		// "SrcMask": "<%TCWebApi_get("Lan_Entry0","netmask","s")%>",
		"SrcMask": "",
		"Active": "No",
		"sessionKey": ""
	};
	
	function LoadMACList() {
		$.ajax({
			url: "/js/New_GUI/MacList.js?v=20140806170414",
			type: "GET",
			dataType: "html",
			success: function(data) {
				allText = data;
				GetXML();
			},
		});
	}
	LoadMACList();
	
	function Load_HTML()	{	$("#header").load("header.asp");	}
	
	function Initial() {
		initialMenu();
	}
	
	var Total_Clients = 0;
	var Total_QoSClients = 0;
	var ClientNumber = 0;

	var StaticRules = 32;
	
	function GetXML()
	{
		var dhcpClient = new Array();
		var staticClient = new Array();
		var qosClient = new Array();
		// dhcpip, staticip, mac, hostname, type, add, active
		var ClientList = new Array();
		$.get("/cgi-bin/get/New_GUI/QoS.cgi", function(){		
			for(var i = 0; i < Total_Clients; i++) {
				var client = new Array();
				client.push(eval("dhcpClient"+i+"_ip"));
				client.push(eval("dhcpClient"+i+"_mac"));
				client.push(eval("dhcpClient"+i+"_hostname"));
				client.push(eval("dhcpClient"+i+"_type"));
				client.push(eval("dhcpClient"+i+"_add"));
				client.push(eval("dhcpClient"+i+"_active"));
				dhcpClient.push(client);
			}

			for(var i = 0; i < StaticRules; i++) {
				var client = new Array();
				client.push(eval("dhcpStatic"+i+"_ip"));
				client.push(eval("dhcpStatic"+i+"_mac"));
				client.push(eval("dhcpStatic"+i+"_active"));
				staticClient.push(client);
			}
			
			for(var i = 0; i < dhcpClient.length; i++) {
				var flag = true;
				for(var z = 0; z < staticClient.length; z++) {
					if(dhcpClient[i][1].toUpperCase() == staticClient[z][1].toUpperCase()) {
						flag = false;
						var client = new Array();
						client.push(dhcpClient[i][0]);					// dhcpip
						client.push(staticClient[z][0]);				// staticip
						client.push(dhcpClient[i][1].toUpperCase());	// mac
						client.push(dhcpClient[i][2]);					// hostname
						
						if(dhcpClient[i][3].indexOf("Ethernet") != -1)
							client.push("LAN");							// type
						else if(dhcpClient[i][3].indexOf("802.11") != -1)
							client.push("WiFi_2.4G");					// type
						else
							client.push("-");							// type
						
						client.push(dhcpClient[i][4]);					// add
						client.push(dhcpClient[i][5]);					// active
						
						ClientList.push(client);
					}
				}	

				if(flag) {
					var client = new Array();
					client.push(dhcpClient[i][0]);						// dhcpip
					client.push("");									// staticip
					client.push(dhcpClient[i][1].toUpperCase());		// mac
					client.push(dhcpClient[i][2]);						// hostname
					
					if(dhcpClient[i][3].indexOf("Ethernet") != -1)
						client.push("LAN");								// type
					else if(dhcpClient[i][3].indexOf("802.11") != -1)
						client.push("WiFi_2.4G");						// type
					else
						client.push("-");								// type
					
					client.push(dhcpClient[i][4]);						// add
					client.push(dhcpClient[i][5]);						// active
					
					ClientList.push(client);
				}
			}

			for(var i = 0; i < 11; i++) {
				var client = new Array();
				var srcMac = eval("QoS_Entry"+i+"_SrcMac");
				/* if(srcMac == "" || srcMac == "N/A") {
					continue;
				} */
				
				client.push(srcMac);
				client.push(eval("QoS_Entry"+i+"_SrcIP"));
				client.push(eval("QoS_Entry"+i+"_SrcMask"));
				client.push(eval("QoS_Entry"+i+"_ActQueue"));
				client.push("");

				for(var z = 0; z < ClientList.length; z++) {
					var clientIP ;
					if(ClientList[z][1] != "")
						clientIP = ClientList[z][1];
					else
						clientIP = ClientList[z][0];

					if(client[1].toUpperCase() == clientIP.toUpperCase()) {
						client[4] = ClientList[z][3];
						client[0] = ClientList[z][2];
						break;
					}
					
					/* if(srcMac.toUpperCase() == ClientList[z][2].toUpperCase()) {
						client[4] = ClientList[z][3];
						if(ClientList[z][0] != "") {
							client[1] = ClientList[z][0];
						}
						break;
					} */
				}

				Total_QoSClients++;
				qosClient.push(client);
				
			}

			arrayQoS2Dv = new Array2D_Var(Total_QoSClients, 6);
			for (var i = 0; i < Total_QoSClients; i ++) {
				arrayQoS2Dv[i][0] = qosClient[i][4];
				arrayQoS2Dv[i][1] = qosClient[i][1];
				arrayQoS2Dv[i][2] = qosClient[i][0];
				switch (qosClient[i][3]) {
					case "":
					case "Low":		arrayQoS2Dv[i][3] = "none";		break;
					case "Medium":	arrayQoS2Dv[i][3] = "medium";	break;
					case "High":	arrayQoS2Dv[i][3] = "high";		break;
					case "Highest":	arrayQoS2Dv[i][3] = "highest";	break;
				}
				
				arrayQoS2Dv[i][4] = "Unknown Vendor";		// For Client vendor use
				arrayQoS2Dv[i][5] = arrayQoS2Dv[i][0];	// For Client nickname use
			}
			

			var count_A = 0;
			var flag_A = 0;

			array2Dv = new Array2DVar(ClientList.length, 6);

			for (var j = 0; j < ClientList.length; j ++) {
				array2Dv[count_A][0]	= ClientList[count_A][3];
				array2Dv[count_A][1]	= ClientList[count_A][3];
				
				array2Dv[count_A][2] = (ClientList[count_A][0]!=""?ClientList[count_A][0]:ClientList[count_A][1]);
				array2Dv[count_A][3] = ClientList[count_A][2];
				var split_ClientMacAddress = array2Dv[count_A][3].split(/[\s:]+/);
				var get_SplitClientMacAddress1 = split_ClientMacAddress[split_ClientMacAddress.length - 6];
				var get_SplitClientMacAddress2 = split_ClientMacAddress[split_ClientMacAddress.length - 5];
				var get_SplitClientMacAddress3 = split_ClientMacAddress[split_ClientMacAddress.length - 4];
				var FullStr_ClientMacAddress = get_SplitClientMacAddress1 + get_SplitClientMacAddress2 + get_SplitClientMacAddress3;
				var Str_toUpperCase = FullStr_ClientMacAddress.toUpperCase();
				if (allText.match(Str_toUpperCase) == Str_toUpperCase) {
					var StrIndexOfNumber = allText.indexOf(Str_toUpperCase) + 7;
					var StrIndexOfNumber_ToString = allText.substring(StrIndexOfNumber).split(/[\s,]+/);
					array2Dv[count_A][4] = decode_char_text(StrIndexOfNumber_ToString[0]);
				} else	{	array2Dv[count_A][4] = "Unknown Vendor";	}
				
				for (var a = 0; a < Total_QoSClients; a ++) {
					var tmpMAC = arrayQoS2Dv[a][2];
					if (tmpMAC == array2Dv[count_A][3]) {
						arrayQoS2Dv[a][4] = array2Dv[count_A][4];
						if (array2Dv[count_A][0] == "" && array2Dv[count_A][1] == "")	{	}
						else														{	arrayQoS2Dv[a][5] = array2Dv[count_A][1];	}
						setTimeout("addDevice_List(" + a + ")", 100);
					}
				}
				
				array2Dv[count_A][5] = "none";
				
				for (var k = 0; k < Total_QoSClients; k ++)	{	if (array2Dv[count_A][3] == arrayQoS2Dv[k][2])	{	flag_A = 1;	}	}
				
				if (flag_A != 1)	{	setTimeout("addDevice_List2(" + count_A + ")", 100);	}
				flag_A = 0;
				count_A ++;
			}
			$("#main").show();
		}, 'script');
	}
	
	function addDevice_List(val)	{	addDevice(arrayQoS2Dv[val][5], arrayQoS2Dv[val][4], arrayQoS2Dv[val][1], arrayQoS2Dv[val][3], arrayQoS2Dv[val][2], arrayQoS2Dv[val][0]);	}
	function addDevice_List2(val)	{	addDevice(array2Dv[val][1], array2Dv[val][4], array2Dv[val][2], array2Dv[val][5], array2Dv[val][3], array2Dv[val][0]);						}
	
	function Array2DVar(x, y) {
		this.length = x;
		this.x = x;
		this.y = y;
		for(var i = 0; i < this.length; i++)	{	this[i] = new Array(y);	}
	}
	
	function Array2D_Var(x, y) {
		this.length = x;
		this.x = x;
		this.y = y;
		for(var i = 0; i < this.length; i++)	{	this[i] = new Array(y);	}
	}
</script>
<style>
#slideshow	{	margin: 0 0 0 0;	}
/* ---------------- Item Instance ---------------- */
#itemInstance {
	width:  188px;
	height: 86px;
	background-image: url('/graphic/New_GUI/qos_itemBg.png?v=20141017135608');
	z-index: 10;
}
.dataElement {
	position: relative;
	background-image: url('/graphic/New_GUI/qos_itemBg.png?v=20141017135608');
}
.dataElement_deviceName {
	position: absolute;
	top: 18px;
	left: 30px;
	color: #4598aa;
	font-size: 13px;
	width: 140px;
	overflow: hidden;
}
.dataElement_vendor {
	position: absolute;
	text-transform:uppercase;
	top: 38px;
	left: 30px;
	color: #888;
	width: 140px;
	overflow: hidden;
	font-size: 12px;
}
.dataElement_ip {
	position: absolute;
	top: 55px;
	left: 30px;
	color: #666;
	width: 140px;
	overflow: hidden;
	font-size: 12px;
}
.dataElement_mac {
	position: absolute;
	display: none;
	top: 55px;
	left: 30px;
	color: #666;
	width: 140px;
	overflow: hidden;
	font-size: 12px;
}
.dataElement_deviceNameReal {
	position: absolute;
	display: none;
	top: 55px;
	left: 30px;
	color: #666;
	width: 140px;
	overflow: hidden;
	font-size: 12px;
}
.qos_label {
	font-size: 16px;
	color: #888;
	text-align: center;
}
#qos_label_alldevices {
	margin: 18px 0 8px 0;
}
#qos_label_priority {
	margin: 25px 0 20px 0;
	font-size: 12px;
}
/* ---------------- prioity ---------------- */
#prioity {
	width:  825px;
	height: 400px;
	margin: 0 auto;
}
/* ---------------- prioity : highest ---------------- */
#prioity_highest {
	position: relative;
	display: inline-block;
	margin: 0 2px;
	width:  200px;
	height: 116px;
	vertical-align: top;
}
#prioity_highest_bg {
	position: absolute;
	width:  100%;
	height: 100%;
	background-image: url('/graphic/New_GUI/qos_priority_highest.gif?v=20141017135608');
}
#prioity_high_bg {
	position: absolute;
	width:  100%;
	height: 100%;
	background-image: url('/graphic/New_GUI/qos_priority_high.gif?v=20141017135608');
}
#prioity_medium_bg {
	position: absolute;
	width:  100%;
	height: 100%;
	background-image: url('/graphic/New_GUI/qos_priority_medium.gif?v=20141017135608');
}
#prioity_highest_label, #prioity_high_label, #prioity_medium_label {
	position: absolute;
	top:4px;
	left: 0;
	text-align:center;
	width: 100%;
	color: #fff;
	font-size: 14px;
}
#prioity_highest_container, #prioity_high_container, #prioity_medium_container{
	position: relative;
	top: 22px;
	left: 6px;
}
#prioity_highest_hitarea {
	position: absolute;
	top: 0;
	left: 0;
	width:  200px;
	height: 116px;
	background-color: blue;
	z-index: 500;
	opacity: 0;
	filter: alpha(opacity=0); 
}
/* ---------------- prioity : high ---------------- */
#prioity_high {
	position: relative;
	display: inline-block;
	margin: 0 2px;
	width:  200px;
	height: 202px;
	vertical-align: top;
}
#prioity_high_hitarea {
	position: absolute;
	top: 0;
	left: 0;
	width:  200px;
	height: 202px;
	background-color: blue;
	z-index: 500;
	opacity: 0;
	filter: alpha(opacity=0); 
}
/* ---------------- prioity : medium ---------------- */
#prioity_medium {
	position: relative;
	display: inline-block;
	margin: 0 2px;
	width:  388px;
	height: 374px;
	vertical-align: top;
}
#prioity_medium_hitarea {
	position: absolute;
	top: 0;
	left: 0;
	width:  388px;
	height: 374px;
	background-color: blue;
	z-index: 500;
	opacity: 0;
	filter: alpha(opacity=0); 
}
</style>
</head>

<body onselectstart="return false;" ondragstart="return false;">
	<div id="wrapper">
		<!-------------------- Logo ------------------------->
		<div id="header"></div>
		<!-------------------- Menu ------------------------->
		<div id="menu"></div>
		<div id="menu_edge"></div>
		<!-------------------- Content ---------------------->
		<div id="content">
			<!-------------------- info ---------------------->
	  		<div id="info">
			  	<div id="FunctionName">&nbsp;<script>I18N("h", "QoS Engine");</script></div>
				<div id="wallimage"><img src="/graphic/New_GUI/page_QoS.png?v=20141017135608" alt="" width="195" height="119"/></div>
	    		<div id="directions">
                 	<script>I18N("h", "Connected clients can be assigned Internet access priority. Click and drag client cards into open slots.");</script>
    				<label id="Get_Help" onClick="showOnlineHelp('QoS Engine');" style="cursor:pointer;display:none;text-Decoration:underline"><script>I18N("h", "Click here for help.");</script></label>
    			</div>
			</div>
			<!-------------------- funcBar ---------------------->
			<div id="funcBar">
				<div id="pagePath"><script>I18N("h", "Advanced");</script> >> <script>I18N("h", "QoS Engine");</script></div>
				<ul id="rightFunc">
					<li style="display:block"><div id="Save_btn" onclick="CheckConnectionStatus();" style="cursor:pointer; display:none"><script>I18N("h", "Save");</script></div></li>
					<li style="display:block"><div id="Save_Disable_btn"><script>I18N("h", "Save");</script></div></li>
				</ul>
			</div>
			<!-------------------- main ---------------------->
			<div id="main" style="display:none">
				<div id="qos_label_alldevices" class="qos_label"><script>I18N("h", "Connected Clients");</script></div>
				<div id="slideshow"></div>
				<div id="qos_label_priority" class="qos_label"><script>I18N("h", "Drag the device cards above to the Priority boxes below.");</script></div>
				<div id="prioity">
					<div id="prioity_highest">
						<div id="prioity_highest_bg"></div>
						<div id="prioity_highest_label"><script>I18N("h", "Highest");</script></div>
						<div id="prioity_highest_container"></div>
						<div id="prioity_highest_hitarea" style="display:none;cursor:pointer;" onmouseover="setDraggingTargetPriority('highest')" onmouseout="setDraggingTargetPriority('none')"></div>
					</div>
					<div id="prioity_high">
						<div id="prioity_high_bg"></div>
						<div id="prioity_highest_label"><script>I18N("h", "High");</script></div>
						<div id="prioity_high_container"></div>
						<div id="prioity_high_hitarea" style="display:none;cursor:pointer;" onmouseover="setDraggingTargetPriority('high')" onmouseout="setDraggingTargetPriority('none')"></div>
					</div>
					<div id="prioity_medium">
						<div id="prioity_medium_bg"></div>
						<div id="prioity_medium_label"><script>I18N("h", "Medium");</script></div>
						<div id="prioity_medium_container"></div>
						<div id="prioity_medium_hitarea" style="display:none;cursor:pointer;" onmouseover="setDraggingTargetPriority('medium')" onmouseout="setDraggingTargetPriority('none')"></div>
					</div>
				</div>
			</div>
		 <div id="CreatePopAlertMessage" style="display:none">
			<div id="AlertPopRect">
			<div id="AlertPopBody">
				<table class="myAlertPop_table_b" id="waitSettingFinish" border="0" cellspacing="0">
				   <tbody>
						 <tr>
						 	<td>
								<center><div id="Loading_pop_image2"></div></center>
							</td>
						 </tr>
						 <tr>
						 	<td label id="reciprocal_Number"></label></td>
						 </tr>
						 <tr>
						 	<td id="dialog_msg_black2"><script>I18N("h", "Your changes are being saved.");</script></td>
						 </tr>
				   </tbody>
				</table>
				<table class="myAlertPop_table_b" id="SuccessSettings" border="0" cellspacing="0"  style="display:none">
				   <tbody>
						 <tr>
						 	<td>
								<center><div id="Information_pop_image"></div></center>
							</td>
						 </tr>
						 <tr>
							 <td>
							 	<div id="dialog_msg_black"><script>I18N("h", "The new settings have been saved.");</script></div>
							 </td>
						 </tr>
						 <tr>
							 <td>
							 	<center><div id="Confirm_btn" onclick="javascript: self.location.href = self.location.href;" style="cursor:pointer"><script>I18N("h", "OK");</script></div></center>
							 </td>
						 </tr>
				   </tbody>
				</table>
			</div>
			</div>
		</div>
		</div>
		<!-- Detect Router Connection, Timmy Add 2013/08/15 -->
		<div id="DetectRouterConnection" style="display:none"></div>
		<div id="footer" border="0">
			<div id="copyright"><script>prints(m_comm_copyright);</script></div>
			<div id="help">
				<a target="_blank" href="http://www.dlink.com/support" style="cursor:pointer;text-Decoration:underline">
					
						<script>prints(m_home_gethelp);</script>
					
				</a>
			</div>
		</div>
	</div>
<!-------------------- main ---------------------->
<div id="itemInstance" style="position:absolute; top:0; left:0; display:none;cursor:pointer;">
	<div class="data">
		<div class="dataElement_deviceName" id="itemInstance_deviceName"></div>
		<div class="dataElement_vendor" id="itemInstance_vendor"></div>
		<div class="dataElement_ip" id="itemInstance_ip"></div>
		<div class="dataElement_mac" id="itemInstance_mac"></div>
		<div class="dataElement_deviceNameReal" id="itemInstance_deviceNameReal"></div>
	</div>
</div>
<script type="text/javascript" charset="utf-8" src="/js/New_GUI/Slideshow.js"></script>
<script type="text/javascript" charset="utf-8" src="/js/New_GUI/GridPanel.js"></script>
<script>
//--------------------------------------------------------------
//		Globel Vars
//--------------------------------------------------------------
var mousex 				= 0;
var mousey 				= 0;
var itemMouseOffsetX 	= 0;
var itemMouseOffsetY 	= 0;
var instance 			= document.getElementById("itemInstance");
var isDraggingItem 		= false;
var dragginItemData		= null;
var targetPriority		= "";
//--------------------------------------------------------------
//		DeviceData
//--------------------------------------------------------------
var deviceData = function(deviceName, vendor, ip, priority, mac, deviceNameReal) {

	this.deviceName 	= deviceName;
	this.vendor			= vendor;
	this.ip				= ip;
	this.mac			= mac
	this.priority 		= priority;
	this.deviceNameReal	= deviceNameReal;
	this.element;
	
	//--------------------------------------------------------------
	// create element
	this.element 						= document.createElement("div");
	this.element.style.width 			= "188px";
	this.element.style.height 			= "86px";
	this.element.style.fontSize			= "12px";
	this.element.style.cursor			= "pointer";
	this.element.style.verticalAlign	= "top";
	this.element.style.margin			= "0 6px";
	this.element.className				= "dataElement";
	this.element.onmouseover = function() {
		this.style.backgroundPosition = "bottom left";
	};
	this.element.onmouseout = function() {
		this.style.backgroundPosition = "top left";
	};
	
	// DeviceName
	this.element_deviceName 			= document.createElement("div");
	this.element_deviceName.className	= "dataElement_deviceName";
	this.element_deviceName.innerHTML 	= deviceName;
	
	// Vendor
	this.element_vendor 				= document.createElement("div");
	this.element_vendor.className		= "dataElement_vendor";
	this.element_vendor.innerHTML 		= vendor;
	
	// IP
	this.element_ip 					= document.createElement("div");
	this.element_ip.className			= "dataElement_ip";
	this.element_ip.innerHTML 			= ip;
	
	// MAC
	this.element_mac 					= document.createElement("div");
	this.element_mac.className			= "dataElement_mac";
	this.element_mac.innerHTML 			= mac;
	
	// deviceNameReal
	this.element_deviceNameReal 				= document.createElement("div");
	this.element_deviceNameReal.className		= "dataElement_deviceNameReal";
	this.element_deviceNameReal.innerHTML 		= deviceNameReal;
	
	this.element.appendChild(this.element_deviceName);
	this.element.appendChild(this.element_vendor);
	this.element.appendChild(this.element_ip);
	this.element.appendChild(this.element_mac);
	this.element.appendChild(this.element_deviceNameReal);
	
	// preset priority status
	if (priority != "none") {
		this.element.style.width 	= "0px";
		this.element.style.opacity 	= "0";
		this.element.style.filter = "alpha(opacity=0)"; //for IE8
		this.element.style.margin	= "0";

		//for IE8
		this.element_deviceName.style.display 	= "none";
		this.element_vendor.style.display 	= "none";
		this.element_ip.style.display 	= "none";
	}
	
	var data = this;
	//--------------------------------------------------------------
	// set priority
	this.setPriority = function(value) {
		data.priority = value;
	}
	//--------------------------------------------------------------
	// Events
	// mouse
	this.element.onmousedown = function() {
		if	(data.priority == "none") {
		
			$(this.element).stop(); // prevent double click error (hide animation is playing)
			
			// get element position
			var itemPos = getElementXY(this);
			
			// count mouse offset
			itemMouseOffsetX = itemPos.x - mousex;
			itemMouseOffsetY = itemPos.y - mousey;
			
			// pass value to instance
			document.getElementById("itemInstance_deviceName").innerHTML		= data.deviceName;
			document.getElementById("itemInstance_vendor").innerHTML			= data.vendor;
			document.getElementById("itemInstance_ip").innerHTML				= data.ip;
			document.getElementById("itemInstance_mac").innerHTML				= data.mac; 
			document.getElementById("itemInstance_deviceNameReal").innerHTML	= data.deviceNameReal;
			
			// hide this
			data.hideElement_noAnimation();
			
			// show instance
			instance.style.top  	= itemPos.y + "px";
			instance.style.left 	= itemPos.x + "px";
			instance.style.display 	= "block";
			
			// isDragging
			startDrag(data);
		}
	}

	if ( this.element.addEventListener ) {
		this.element.addEventListener("touchstart", function(e) {
			
			if	(data.priority == "none") {
			
				$(this.element).stop(); // prevent double click error (hide animation is playing)
				
				// get element position
				var itemPos = getElementXY(this);
				
				// count mouse offset
				itemMouseOffsetX = itemPos.x - e.changedTouches[0].pageX; // Touch position!!
				itemMouseOffsetY = itemPos.y - e.changedTouches[0].pageY; // Touch position!!
				
				// pass value to instance
				document.getElementById("itemInstance_deviceName").innerHTML		= data.deviceName;
				document.getElementById("itemInstance_vendor").innerHTML			= data.vendor;
				document.getElementById("itemInstance_ip").innerHTML				= data.ip;
				document.getElementById("itemInstance_mac").innerHTML				= data.mac; 
				document.getElementById("itemInstance_deviceNameReal").innerHTML	= data.deviceNameReal;
				
				// hide this
				data.hideElement_noAnimation();
				
				// show instance
				instance.style.top  	= itemPos.y + "px";
				instance.style.left 	= itemPos.x + "px";
				instance.style.display 	= "block";
				
				// isDragging
				startDrag(data);
			}
		});
	}
	//--------------------------------------------------------------
	// show
	this.showElement_backToSlideshow = function() {
		mySlideshow.putAndSlideToLast(data.element, function() {
			$(data.element).stop();
			$(data.element).animate({opacity:1, width:"188px"}, 300, 'easeOutCubic');
			data.element.style.cursor					= "pointer";
			data.element.style.margin					= "0 6px";
			data.element_deviceName.style.display		= "block";
			data.element_vendor.style.display			= "block";
			data.element_ip.style.display				= "block"; 
			data.element_mac.style.display				= "none";
			data.element_deviceNameReal.style.display	= "none";
		});
	}
	this.showElement_noAnimation = function() {
		data.element.style.width					= "188px";
		$(data.element).css({ opacity: 1 });        // for IE8
		data.element.style.opacity					= 1
		data.element.style.margin 					= "0 6px";
		data.element.style.cursor  					= "pointer";
		data.element_deviceName.style.display 		= "block";
		data.element_vendor.style.display 			= "block";
		data.element_ip.style.display 				= "block";
		data.element_mac.style.display 				= "none";
		data.element_deviceNameReal.style.display	= "none";
	}
	//--------------------------------------------------------------
	// hide
	this.hideElement = function() {
		$(data.element).stop();
		$(data.element).animate({width:"0px", margin:"0px"}, 300, 'easeOutCubic');
		data.element.style.cursor  = "default";
		data.element_deviceName.style.display 		= "none";
		data.element_vendor.style.display 			= "none";
		data.element_ip.style.display 				= "none";
		data.element_mac.style.display 				= "none"; 
		data.element_deviceNameReal.style.display	= "none";
		mySlideshow.updateToLastPage();
	}
	this.hideElement_noAnimation = function() {
		data.element.style.opacity = "0";
		$(data.element).css({ opacity: 0 }); //for IE8
		data.element_deviceName.style.display 		= "none";
		data.element_vendor.style.display 			= "none";
		data.element_ip.style.display 				= "none";
		data.element_mac.style.display 				= "none"; 
		data.element_deviceNameReal.style.display	= "none";
	}
	
}
// createDeviceData
var deviceDataArray = new Array(); 		// contain all device in here!
var createDeviceData = function(deviceName, vendor, ip, priority, mac, deviceNameReal) {
	var data = new deviceData(deviceName, vendor, ip, priority, mac, deviceNameReal);
	deviceDataArray.push(data);
	return data;
}

//--------------------------------------------------------------
//		Slideshow 
//--------------------------------------------------------------
// setup
var mySlideshow = new Slideshow("slideshow");

//--------------------------------------------------------------
//		Mouse Event (window)
//--------------------------------------------------------------
// Start Drag
function startDrag(dataObject) {

	isDraggingItem  = true;
	dragginItemData = dataObject;
	
	// show priority hitareas
	document.getElementById("prioity_highest_hitarea").style.display = "block";
	document.getElementById("prioity_high_hitarea").style.display    = "block";
	document.getElementById("prioity_medium_hitarea").style.display  = "block";
	
}
// End Drag
function endDrag() {
	isDraggingItem = false;
	
	// hide priority hitareas
	document.getElementById("prioity_highest_hitarea").style.display = "none";
	document.getElementById("prioity_high_hitarea").style.display    = "none";
	document.getElementById("prioity_medium_hitarea").style.display  = "none";
	$("#prioity_highest_bg").stop();
	$("#prioity_highest_bg").stop();
	$("#prioity_highest_bg").stop();
	$("#prioity_highest_bg").animate({opacity:1}, 200);
	$("#prioity_high_bg").animate({opacity:1}, 200);
	$("#prioity_medium_bg").animate({opacity:1}, 200);
	
}
// Mouse Move
document.body.onmousemove = function(event){ //for IE8

    mousex = event.clientX + document.body.scrollLeft;
    mousey = event.clientY + document.body.scrollTop;
	
	if (isDraggingItem) {
		instance.style.top  = mousey + itemMouseOffsetY + "px";
		instance.style.left = mousex + itemMouseOffsetX + "px";
	}
}
window.onmousemove = function(e){
	mousex = e.clientX;
	mousey = e.clientY;
	
	if (isDraggingItem) {
		instance.style.top  = mousey + itemMouseOffsetY + "px";
		instance.style.left = mousex + itemMouseOffsetX + "px";
	}
}
// Mouse Up
function mouseup() {
	if(!isDraggingItem)
		return;

	// check priority
	switch (targetPriority) {
		case "highest":
			if (!priorityGrid_highest.isFull()) {	// check not full
				if(!priorityGrid_highest.existData(dragginItemData)) { 	// check not already in grid (just for safe)
					addDataToPriorityGrid(dragginItemData, priorityGrid_highest, "highest")
					endDrag();
					return;
				}
			}
			break;
			
		case "high":
			if (!priorityGrid_high.isFull()) {	// check not full
				if(!priorityGrid_high.existData(dragginItemData)) { 	// check not already in grid (just for safe)
					addDataToPriorityGrid(dragginItemData, priorityGrid_high, "high")
					endDrag();
					return;
				}
			}
			break;
			
		case "medium":
			if (!priorityGrid_medium.isFull()) {	// check not full
				if(!priorityGrid_medium.existData(dragginItemData)) { 	// check not already in grid (just for safe)
					addDataToPriorityGrid(dragginItemData, priorityGrid_medium, "medium")
					endDrag();
					return;
				}
			}
			break;
		
		// none : show item back
		default:
			endDrag();
			break;
	}
	// instance fly back to original position (animation) //BB
	var originalPos = getElementXY(dragginItemData.element);
	$(instance).animate({top:originalPos.y, left:originalPos.x}, 200, 
		function(){
			// fly back animation completed
			instance.style.display = "none"; 				// hide instance
			dragginItemData.showElement_noAnimation();		// show original item
		});
	
	// End Dragging settings
	endDrag();
}
document.body.onmouseup = function(e) { //for IE8
	mouseup();
}
window.onmouseup = function(e)	{	mouseup();	}

// touch
function checkIfInElement(x, y, element) {
	var pos = getElementXY(element);
	var width  = parseInt(getStyle(element, "width").replace("px", ""));
	var height = parseInt(getStyle(element, "height").replace("px", ""));
	if(x > pos.x && x < pos.x + width && y > pos.y && y < pos.y + height) {
		return true;
	} else {
		return false;
	}
}
function getStyle(oElm, strCssRule){
	var strValue = "";
	if(document.defaultView && document.defaultView.getComputedStyle){
		strValue = document.defaultView.getComputedStyle(oElm, "").getPropertyValue(strCssRule);
	}
	else if(oElm.currentStyle){
		strCssRule = strCssRule.replace(/\-(\w)/g, function (strMatch, p1){
			return p1.toUpperCase();
		});
		strValue = oElm.currentStyle[strCssRule];
	}
	return strValue;
}
	if ( document.addEventListener ) {
		document.addEventListener("touchmove", function(e) {
			mousex = e.changedTouches[0].pageX;
			mousey = e.changedTouches[0].pageY;
			
			if (isDraggingItem) {
				e.preventDefault();
				instance.style.top  = mousey + itemMouseOffsetY + "px";
				instance.style.left = mousex + itemMouseOffsetX + "px";
				
				// area detection
				// medium
				var ishighest = checkIfInElement(mousex, mousey, document.getElementById("prioity_highest_hitarea"));
				if(ishighest) {
					setDraggingTargetPriority("highest");
				} else {
					var ishigh = checkIfInElement(mousex, mousey, document.getElementById("prioity_high_hitarea"));
					if(ishigh) {
						setDraggingTargetPriority("high");
					} else {
						var ismedium = checkIfInElement(mousex, mousey, document.getElementById("prioity_medium_hitarea"));
						if(ismedium) {
							setDraggingTargetPriority("medium");
						} else {
							setDraggingTargetPriority("none");
						}
					}
				}
			}
		});
	}
	if ( document.addEventListener ) {
		document.addEventListener("touchend", function(e)	{	mouseup();	});
	}
//--------------------------------------------------------------
//		Add Data To PriorityGrid
//--------------------------------------------------------------
function addDataToPriorityGrid(data, priorityGrid, priorityName) {
	
	// get next cell Position
	var targetPos = priorityGrid.nextCellPosition();
	
	// instance fly to target
	$(instance).animate({top:targetPos.y, left:targetPos.x}, 100, 
		function(){
			// fly back animation completed
			instance.style.display 	= "none"; 	// hide instance
			
			// add data to cell
			priorityGrid.addData(data);
			
			// set priority to data
			data.setPriority(priorityName);
			
			// hide original
			data.hideElement();
			save_button_changed();
			changeFlag = true;
			checkFlag = true;
			// GetClickTime();
		});
}
//--------------------------------------------------------------
//		Set Dragging Target Priority (when mouse over priority hitarea)
//--------------------------------------------------------------
function setDraggingTargetPriority(priority) {
	if (isDraggingItem) {
		targetPriority = priority;
		switch(priority) {
			case "highest":
				$("#prioity_highest_bg").stop();
				$("#prioity_high_bg").stop();
				$("#prioity_medium_bg").stop();
				$("#prioity_highest_bg").animate({opacity:1}, 200);
				$("#prioity_high_bg").animate({opacity:0.5}, 200);
				$("#prioity_medium_bg").animate({opacity:0.5}, 200);
				break;
			case "high":
				$("#prioity_highest_bg").stop();
				$("#prioity_high_bg").stop();
				$("#prioity_medium_bg").stop();
				$("#prioity_highest_bg").animate({opacity:0.5}, 200);
				$("#prioity_high_bg").animate({opacity:1}, 200);
				$("#prioity_medium_bg").animate({opacity:0.5}, 200);
				break;
			case "medium":
				$("#prioity_highest_bg").stop();
				$("#prioity_high_bg").stop();
				$("#prioity_medium_bg").stop();
				$("#prioity_highest_bg").animate({opacity:0.5}, 200);
				$("#prioity_high_bg").animate({opacity:0.5}, 200);
				$("#prioity_medium_bg").animate({opacity:1}, 200);
				break;
			case "none":
				$("#prioity_highest_bg").stop();
				$("#prioity_high_bg").stop();
				$("#prioity_medium_bg").stop();
				$("#prioity_highest_bg").animate({opacity:0.5}, 200);
				$("#prioity_high_bg").animate({opacity:0.5}, 200);
				$("#prioity_medium_bg").animate({opacity:0.5}, 200);
				break;
		}
	}
}

//--------------------------------------------------------------
//		InstanceObject (like DeviceData but has a remove button)
//--------------------------------------------------------------
// Instance
var InstanceObject = function() {
	this.deviceName	 = "none";
	this.vendor			= "none";
	this.ip				= "none";
	this.mac			= "none";
	this.deviceNameReal	= "none";
	this.element;
	this.delete_btn;
	this.status;
	this.parent;
	this.deviceData;
	
	// Create Element
	this.element					= document.createElement("div");
	this.element.style.width 		= "188px";
	this.element.style.height 		= "86px";
	this.element.style.fontSize		= "12px";
	this.element.className			= "dataElement";
	this.element.style.cursor		= "default";
	
	// DeviceName
	var deviceName 			= document.createElement("div");
	deviceName.className	= "dataElement_deviceName";
	deviceName.innerHTML 	= this.deviceName;
	
	// Vendor
	var vendor 				= document.createElement("div");
	vendor.className		= "dataElement_vendor";
	vendor.innerHTML		= this.vendor;
	
	// IP
	var ip 					= document.createElement("div");
	ip.className			= "dataElement_ip";
	ip.innerHTML			= this.ip;
	
	// MAC
	var mac					= document.createElement("div");
	mac.className			= "dataElement_mac";
	mac.innerHTML			= this.mac;
	
	// deviceNameReal
	var deviceNameReal			= document.createElement("div");
	deviceNameReal.className	= "dataElement_deviceNameReal";
	deviceNameReal.innerHTML	= this.deviceNameReal;
	
	// Remove Button
	var remove 						= document.createElement("div");
	remove.style.position 			= "absolute";
	remove.style.top 				= "15px";
	remove.style.right 				= "14px";
	remove.style.width 			 	= "13px";
	remove.style.height			 	= "13px";
	remove.style.backgroundImage 	= "url('/graphic/New_GUI/slideshow_closeBtn.png')";
	remove.style.cursor				= "pointer";
	/*remove.onmouseover = function() {
		this.style.backgroundPosition = "top right";
	};
	remove.onmouseout = function() {
		this.style.backgroundPosition = "top left";
	};*/
	
	this.element.appendChild(deviceName);
	this.element.appendChild(vendor);
	this.element.appendChild(ip);
	this.element.appendChild(mac);
	this.element.appendChild(deviceNameReal);
	this.element.appendChild(remove);
	
	var base = this;
	//--------------------------------------------------------------
	// Remove Button Event
	remove.onclick = function() {
		base.deviceData.setPriority("none");
		base.deviceData.showElement_backToSlideshow();
		base.parent.removeData(base.deviceData); // remove from prioity grid
		save_button_changed();
		changeFlag = true;
		checkFlag = true;
		// GetClickTime();
	}
	
	//--------------------------------------------------------------
	// Functions
	// setDeviceData (for grid update)
	this.setDeviceData = function(data) {
		base.deviceData 		 = data;
		deviceName.innerHTML	 = data.deviceName;
		vendor.innerHTML		 = data.vendor;
		ip.innerHTML 			 = data.ip;
		mac.innerHTML			 = data.mac;
		deviceNameReal.innerHTML = data.deviceNameReal;
	}
	// removeDeviceData (for grid update)
	this.removeDeviceData = function() {
		base.deviceData 		 = null;
		deviceName.innerHTML	 = "none";
		vendor.innerHTML 		 = "none";
		ip.innerHTML 			 = "none";
		mac.innerHTML 			 = "none";
		deviceNameReal.innerHTML = "none";
	}
	this.show = function() {
		$(this.element).css({ opacity: 1 }); 
		this.element.style.opacity = 1;
		deviceName.style.display  	= "block";
		vendor.style.display  		= "block";
		ip.style.display  			= "block";
		//mac.style.display  		= "block";
		remove.style.display  		= "block";
	}
	this.hide = function() {
		$(this.element).css({ opacity: 0 }); 
		this.element.style.opacity = 0;
		deviceName.style.display  	= "none";
		vendor.style.display  		= "none";
		ip.style.display  			= "none";
		//mac.style.display  		= "none";
		remove.style.display 		= "none";
	}
}

//--------------------------------------------------------------
//		Priority Cell (initialize)
//--------------------------------------------------------------
var priorityGrid_highest = new GridPanel(1, 1, "prioity_highest_container");
var highestInstance = new InstanceObject();
priorityGrid_highest.addInstance(highestInstance);

var priorityGrid_high = new GridPanel(2, 1, "prioity_high_container");
for(var i=0; i<2; i++) {
	var _instance = new InstanceObject();
	priorityGrid_high.addInstance(_instance);
}
var priorityGrid_medium = new GridPanel(4, 2, "prioity_medium_container");
for(var i=0; i<8; i++) {
	var _instance = new InstanceObject();
	priorityGrid_medium.addInstance(_instance);
}
//--------------------------------------------------------------
//		Fill Devices
//--------------------------------------------------------------
// addDevice
function addDevice(deviceName, vendor, ip, priority, mac, deviceNameReal) {

	// create data
	var data = createDeviceData(deviceName, vendor, ip, priority, mac, deviceNameReal); 
	
	// add data.element to slideshow
	mySlideshow.addItem(data);
	
	// put to priority grid
	switch (priority) {
		case "highest":
			if (!priorityGrid_highest.isFull()) {	// check priority grid is full or not
				priorityGrid_highest.addData(data);
			} else {
				data.setPriority("none"); 		// priority grid is full, set priority to "none".
			}
			break;
		case "high":
			if (!priorityGrid_high.isFull()) {	// check priority grid is full or not
				priorityGrid_high.addData(data);
			} else {
				data.setPriority("none");		 // priority grid is full, set priority to "none".
			}
			break;
		case "medium":
			if (!priorityGrid_medium.isFull()) {	// check priority grid is full or not
				priorityGrid_medium.addData(data);
			} else {
				data.setPriority("none"); 		// priority grid is full, set priority to "none".
			}
			break;
	}
}

//--------------------------------------------------------------
//		Position functions
//--------------------------------------------------------------
function getElementXY(element) {
	var x = 0;
	var y = 0;
	while( element != null ) {
		x += element.offsetLeft;
		y += element.offsetTop;
		element = element.offsetParent;
	}
	return {x:x, y:y};
}
function getMousePosition(e) {
	var _x;
	var _y;
	if (!isIE) {
		_x = e.pageX;
		_y = e.pageY;
	}
	if (isIE) {
		_x = event.clientX + document.body.scrollLeft;
		_y = event.clientY + document.body.scrollTop;
	}
	return true;
}

function SetXML()
{
	document.getElementById("CreatePopAlertMessage").style.display = "inline";

	var count = 0;
	for(var i = 0; i < deviceDataArray.length; i++) {
		if(deviceDataArray[i].priority == "none")
			continue;
			
		// qos_data["SrcMac_"+count] = deviceDataArray[i].mac;
		qos_data["SrcMac_"+count] = "";
		qos_data["SrcIP_"+count] = deviceDataArray[i].ip;
		
		switch (deviceDataArray[i].priority) {
			case "highest":	qos_data["ActQueue_"+count] = "Highest";	break;
			case "high":	qos_data["ActQueue_"+count] = "High";		break;
			case "medium":	qos_data["ActQueue_"+count] = "Medium";		break;
			case "none":	qos_data["ActQueue_"+count] = "";			break;
		}
		count++;
	}

	if(count > 0)
		qos_data.Active = "Yes";

	document.getElementById("CreatePopAlertMessage").style.display = "inline";
	document.getElementById("waitSettingFinish").style.display = "inline";
	Start_reciprocal_Number_RestoreConfiguration();

	$.get("/cgi-bin/get/New_GUI/get_sessionKey.asp", function(sessionKey){
		qos_data.sessionKey = sessionKey;
		setTimeout('$.post("/cgi-bin/New_GUI/Set/QoS.asp", qos_data, function(){save_flag = true;});', 300);
	});
}

var save_flag = false;
var _ReciprocalNumber = 10;
function Start_reciprocal_Number_RestoreConfiguration() {
	if (_ReciprocalNumber >= 0) {
		document.getElementById("reciprocal_Number").innerHTML = _ReciprocalNumber + " " + I18N("j", "Sec");
		_ReciprocalNumber --;
		setTimeout("Start_reciprocal_Number_RestoreConfiguration()", 1000);
	} else {
		if(save_flag) {
			document.getElementById("waitSettingFinish").style.display = "none";
			document.getElementById("SuccessSettings").style.display = "inline";
		} else {
			setTimeout("Start_reciprocal_Number_RestoreConfiguration()", 1000);
		}
	}
}

function CheckConnectionStatus()
{
	$.ajax({
		cache : false,
		url : "/js/New_GUI/CheckConnection",
		timeout : 5000,
		type : "GET",
		success : function(data) { SetXML(); },
		error : function() { document.getElementById("DetectRouterConnection").style.display = "inline"; }
	});
}

document.onkeydown = function(e) {
	e = e || window.event; 
	var charCode = e.charCode || e.keyCode;
  	if(charCode == 13) {  // ENTER
	}
};

function save_button_changed() {
	document.getElementById("Save_Disable_btn").style.display = "none";
	document.getElementById("Save_btn").style.display = "block";
}
</script>

</body>
<script type="text/javascript">
	Load_HTML();
	Initial();
	setMenu("menu_Advanced");
	$( document ).tooltip();
</script>
</html>
