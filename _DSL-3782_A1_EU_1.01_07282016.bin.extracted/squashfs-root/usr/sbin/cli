#!/bin/sh

case "$1" in
fwversion|FWVERSION)
        if [ "$2" = "get" ]; then
		bootVersion=`sys bootversion get`
                firmwareVersion=`tcapi get DeviceInfo FwVer`
                dslversion=`tcapi get Info_Adsl fwVer`
                vendor=`tcapi get Upnpd_Entry Manufacturer`
                modelname=`tcapi get Upnpd_Entry ModelName`
		echo "$bootVersion"
                echo -e 'Runtime code: \c'
                echo "$firmwareVersion"
                echo -e 'ADSL version: \c'
                echo "$dslversion"
        echo -e 'Brand name : \c'
                echo "$vendor"
        echo -e 'Model name : \c'
                echo "$modelname"
                echo "OK"
        else
                echo "usage: cli fwversion get"
        fi
        ;;
hwversion|HWVERSION)
	case "$2" in
        	get|GET)
			mtd readflash /tmp/hwversion 20 198280 reservearea >/dev/null 2>&1
			echo "`cat /tmp/hwversion  | grep hwversion | cut -f1`"
			echo "OK"
                	;;
        	set|SET)
                	if [ "$3" != "" ]; then
				/userfs/bin/tcapi set SysInfo_Entry HWVer $3
				/userfs/bin/tcapi save	
				echo "hwversion: $3" > /tmp/Hwversion
				mtd writeflash /tmp/Hwversion 20 198280 reservearea >/dev/null 2>&1
                        	echo "OK"
                	fi
                	;;
        	*)
                echo "usage: cli hwversion {get|set <value>}"
                	;;
        	esac
        ;;

ledtest|LEDTEST)
        if [ "$2" = "set" ] && [ "$3" = "on" ]; then
		mfc led_internet green
		mfc led_power green
		sys led green
                echo "OK"
        elif [ "$2" = "set" ] && [ "$3" = "off" ]; then
		sys led off
                echo "OK"
        elif [ "$2" = "set" ] && [ "$3" = "green" ]; then
                sys led green
                echo "OK"
	elif [ "$2" = "set" ] && [ "$3" = "red" ]; then
                sys led red
                echo "OK"
	else
                echo "usage: cli ledtest set {on|off}"
        fi
        ;;
keydetect|KEYDETECT)
        if [ "$2" = "set" ] && [ "$3" = "on" ]; then
		echo 1 > /proc/tc3162/gButtonCheck
		button_check &
                echo "OK"
        elif [ "$2" = "set" ] && [ "$3" = "off" ]; then
		echo 0 > /proc/tc3162/gButtonCheck
		killall button_check
                echo "OK"
        else
                echo "usage: cli keydetect set {on|off}"
        fi
        ;;
mac|MAC)
        case "$2" in
        get|GET)
                MAC=`tcapi get Info_Ether mac`
		echo "MAC ADDR: $MAC"
                echo "OK"
                ;;
        set|SET)
                if [ "$3" != "" ]; then
                        sys mac $3
#                        echo "OK"
                fi
                ;;
        *)
                echo "usage: cli mac {get|set <XX:XX:XX:XX:XX:XX>}"
                ;;
        esac
        ;;
config|CONFIG)
        if [ "$2" = "set" ] && [ "$3" = "default" ]; then
			tcapi set System_Entry reboot_type 2
			tcapi commit System_Entry 
                echo "OK"
		elif [ "$2" = "set" ] && [ "$3" = "produce_default" ]; then
			sys telnetch
			tcapi set System_Entry reboot_type 2
			tcapi commit System_Entry
			echo "OK"			
        else
                echo "usage: cli config set {default|produce_default}"
        fi
        ;;
usb|USB)
        case "$2" in
        get|GET)
                result=`ls /tmp/mnt/dev/`
                if [ "$result" != "" ]; then
                        echo "$result"
                        echo "OK"
                else
                        echo "FAILED"
                fi
                ;;
        *)
                echo "usage: cli usb get"
                ;;
        esac
        ;;
adslbridge|ADSLBRIDGE)
    if [ "$2" = "set" ] ; then
	for i in 0 1 2 3 4 5 6 7
	do 
		tcapi set Wan_Common TransMode ATM
		tcapi set Wan_Common WanMode ADSL
		tcapi set Wan_PVC$i ISP 3
	done
	tcapi commit Wan_Common
        echo "OK"
    else
        echo "usage: cli adslbridge set"
    fi
    ;;
vdslbridge|VDSLBRIDGE)
    if [ "$2" = "set" ] ; then
	tcapi set Wan_Common TransMode PTM
	tcapi set Wan_Common WanMode VDSL
	tcapi set WanExt_PVC8e0 ISP 3
	tcapi set WanExt_PVC8e0 dot1q No
	tcapi set WanExt_PVC8e0 VLANID 0
	tcapi commit WanExt_PVC8e0
	tcapi commit Wan_Common
	
        echo "OK"
    else
        echo "usage: cli vdslbridge set"
    fi
    ;;
etherbridge|ETHERBRIDGE)
    if [ "$2" = "set" ] ; then
	tcapi set Wan_Common TransMode Ethernet
	tcapi set Wan_Common WanMode Fibre
	tcapi set Wan_PVC10 ISP 3
	tcapi commit Wan_Common
        echo "OK"
    else
        echo "usage: cli etherbridge set"
    fi
    ;;
checkadslmode|CHECKADSLMODE)
        ADSLMODE=`tcapi get Wan_PVC0 ISP`
        if [ $ADSLMODE = 0 ] ; then
                echo "Dynamic IP Address"
        elif [ $ADSLMODE = 1 ]; then
		echo "Static IP Address"
	elif [ $ADSLMODE = 2 ]; then
		echo "PPPoA/PPPoE"
	else
                echo "Brideg Mode"
        fi
    echo "OK"
    ;;
adsl|ADSL)
    if [ "$2" = "get" ] && [ "$3" = "speed" ]; then
                ADSLDRATE=`tcapi get Info_Adsl DataRateDown`
                ADSLURATE=`tcapi get Info_Adsl DataRateUp`
                if [ "$ADSLDRATE" = "no attribute information" ]; then
                        ADSLDRATE=0
                fi
        if [ "$ADSLURATE" = "no attribute information" ]; then
                ADSLURATE=0
        fi
                echo -e 'US: \c'
                echo "$ADSLURATE kbps"
        echo -e 'DS: \c'
        echo "$ADSLDRATE kbps"
                echo "OK"
        elif [ "$2" = "get" ] && [ "$3" = "status" ]; then
                ADSLSTATUS=`tcapi get Info_Adsl lineState`
                echo "Adsl status: $ADSLSTATUS"
                echo "OK"
    else
        echo "usage: cli adsl get {speed|status}"
    fi
    ;;
wlan|WLAN)
    case "$2" in
    set|SET)
        if [ "$3" = "ssid" ] && [ "$4" != "" ]; then
        		if [ `expr length $4` -gt 2 ] && [ `expr length $4` -lt 33 ]; then
					tcapi set WLan_Entry0 SSID  $4
							  tcapi set WebCurSet_Entry wlan_id 0
								tcapi commit WLan_Entry0
								echo "OK"

                else
                                echo "Error: SSID length should be between 3 and 32 alpha numeric characters."
                                exit 1
                   fi

        elif [ "$3" = "channel" ] && [ "$4" != "" ]; then
                   tcapi set WLan_Common Channel $4
                   tcapi commit WLan_Common
                   tcapi commit WLan_Entry0
                   echo "OK"                 
        elif [ "$3" = "bw" ] && [ "$4" != "" ]; then
                   if [ "$4" = "140" ]; then
                   	      tcapi set WLan_Common HT_BW 0
                   else
                           tcapi set WLan_Common HT_BW 1
			   tcapi set WLan_Common HT_GI 1
			   tcapi set WLan_Common HT_BSSCoexistence 0
                   fi
                   	tcapi commit WLan_Common
                           echo "OK"
        elif [ "$3" = "default" ] && [ "$4" != "" ] && [ "$5" != "" ]&& [ "$6" != "" ]; then
        		if [ `expr length $4` != 16 ] || [ `expr length $5` != 16 ] || [ `expr length "$6"` -gt 30 ]; then
                                echo "Error: psk length must be 16, password length must be 16,country code must be less than 30."
                                exit 1
                   else
                                 mfc wlan init $4 $5 "$6" > /dev/null 2>&1
                  	      echo "OK"
                   fi

        else
                   echo "usage: cli wlan set ssid <value>"
                   echo "usage: cli wlan set channel <value:1~13>"
                   echo "usage: cli wlan set bw <value:140/300>"
                   echo "usage: cli wlan set default <psk> <password> <countrycode>"
        fi
        ;;
    get|GET)
    	if [ "$3" = "ssid" ]; then
                  tcapi get WLan_Entry0 SSID
                  echo "OK"
    	elif [ "$3" = "channel" ]; then
                  tcapi get WLan_Common Channel
                  echo "OK"
         elif [ "$3" = "pin" ]; then
                  wlanphxcmd wps_pinval display
                  echo "OK"         
         elif [ "$3" = "bw" ]; then
                  VAR=`tcapi get WLan_Common HT_BW`
                  if [ $VAR = 0 ];then
                     echo 140
                  else
                     echo 300
                  fi
                  echo "OK"
         elif [ "$3" = "default" ]; then 
                mfc wlan show > /dev/null 2>&1
                 cat /tmp/readinf  | grep psk | cut -f1 
                echo "OK"
         else
                  echo "usage: cli wlan get ssid"
                  echo "usage: cli wlan get pin"
                  echo "usage: cli wlan get channel"
                  echo "usage: cli wlan get bw"
                  echo "usage: cli wlan get default"
         fi
         ;;              
    *)
     echo "usage: cli wlan {get|set ssid <value>}"
     echo "usage: cli wlan {get|set channel <value>}"
     echo "usage: cli wlan get pin"
     echo "usage: cli wlan {get|set bw <value>}"
     echo "usage: cli wlan {get|set default <psk> <password> <countrycode>}"
     ;;
     esac
     ;;
testwlan|TESTWLAN)
     if [ "$2" = "set" ] && [ "$3" = "on" ]; then
	     tcapi set WLan_Common APOn 1
	     tcapi set WLan_Common BssidNum 4
	     tcapi set WLan_Entry0 EnableSSID 1
	     tcapi set WLan_Entry0 AuthMode OPEN
	     tcapi set WLan_Entry0 EncrypType NONE	     
             tcapi set WebCurSet_Entry wlan_id 0
             tcapi commit WLan	     
             echo "OK"
     else
              echo "usage: cli testwlan set on"
     fi
     ;;
wlan11ac|WLAN11AC)
	case "$2" in
    set|SET)
        if [ "$3" = "ssid" ] && [ "$4" != "" ]; then
                if [ `expr length $4` -gt 2 ] && [ `expr length $4` -lt 33 ]; then
                tcapi set WLan11ac_Entry0 SSID  $4
                             tcapi set WebCurSet_Entry wlan_ac_id 0
                                 tcapi commit WLan11ac_Entry0
                                echo "OK"
                   else
                                echo "Error: SSID length should be between 3 and 32 alpha numeric characters."
                                exit 1
                   fi

        elif [ "$3" = "channel" ] && [ "$4" != "" ]; then
                   tcapi set WLan11ac_Common Channel $4
                   tcapi commit WLan11ac_Common
                   tcapi commit WLan11ac_Entry0
                   echo "OK"
        elif [ "$3" = "default" ] && [ "$4" != "" ] && [ "$5" != "" ]; then
                if [ `expr length $4` != 16 ] || [ `expr length "$5"` -gt 30 ]; then
                                echo "Error: psk length must be 16, country code must be less than 30."
                                exit 1
                   else
                                 mfc wlan init $4 "$5" > /dev/null 2>&1
                          echo "OK"
                   fi
	 else
                   echo "usage: cli wlan11ac set ssid <value>"
                   echo "usage: cli wlan11ac set channel <value:1~13>"
                   echo "usage: cli wlan11ac set default <psk> <countrycode>"
        fi
        ;;
    get|GET)
        if [ "$3" = "ssid" ]; then
                  tcapi get WLan11ac_Entry0 SSID
                  echo "OK"
        elif [ "$3" = "channel" ]; then
                  tcapi get WLan11ac_Common Channel
                  echo "OK"
        elif [ "$3" = "default" ]; then
                mfc wlan show > /dev/null 2>&1
                 cat /tmp/readinf  | grep psk | cut -f1
                echo "OK"
         else
                  echo "usage: cli wlan11ac get ssid"
                  echo "usage: cli wlan11ac get channel"
                  echo "usage: cli wlan11ac get default"
         fi
         ;;
    *)
     echo "usage: cli wlan11ac {get|set ssid <value>}"
     echo "usage: cli wlan11ac {get|set channel <value>}"
     echo "usage: cli wlan11ac {get|set default <psk> <countrycode>}"
     ;;
	 esac
     ;;
testwlan11ac|TESTWLAN11AC)
     if [ "$2" = "set" ] && [ "$3" = "on" ]; then
         tcapi set WLan11ac_Common APOn 1
         tcapi set WLan11ac_Common BssidNum 4
         tcapi set WLan11ac_Entry0 EnableSSID 1
         tcapi set WLan11ac_Entry0 AuthMode OPEN
         tcapi set WLan11ac_Entry0 EncrypType NONE
             tcapi set WebCurSet_Entry wlan11ac_id 0
             tcapi commit WLan11ac
             echo "OK"
     else
              echo "usage: cli testwlan11ac set on"
     fi
     ;;

serialnumber|SERIALNUMBER)
        case "$2" in
        get|GET)
		/userfs/bin/mtd readflash /tmp/number 32 198240 reservearea >/dev/null 2>&1
		echo "`cat /tmp/number  | grep serialnumber | cut -f1`"
		echo "OK"
		tmp=`cat /tmp/number  | grep serialnumber | cut -d:  -f2 |cut -d" " -f2 `
		/userfs/bin/tcapi set SysInfo_Entry RouteNum $tmp
                ;;
        set|SET)
                if [ "$3" != "" ]; then
			/userfs/bin/tcapi set SysInfo_Entry RouteNum $3
			/userfs/bin/tcapi save
			echo "serialnumber: $3" > /tmp/serialnumber
			/userfs/bin/mtd writeflash /tmp/serialnumber 32 198240 reservearea >/dev/null 2>&1
                        echo "OK"
                fi
                ;;
        *)
                echo "usage: cli serialnumber {get|set <value>}"
                ;;
        esac
        ;;

gigaether|GIGAETHER)
        case "$2" in
        get|GET)
                eth_stats=`cat /proc/tc3162/eth1_link_st`
		echo "Giga stats: $eth_stats"
                echo "OK"
                ;;
        set|SET)
                if [ "$3" = "1000M/FULL" ]; then
			tce miiw 7 0 3100
                        sleep 1
			tce miiw 7 0 0140
			sleep 1
                        echo "Set 1000M/FULL OK"
		elif [ "$3" = "1000M/HALF" ]; then
			tce miiw 7 0 3100
			sleep 1
			tce miiw 7 0 0040
			sleep 1
			echo "Set 1000M/HALF OK"
		elif [ "$3" = "100M/FULL" ]; then
			tce miiw 7 0 3100
			sleep 1
			tce miiw 7 0 2100
			sleep 1
			echo "Set 100M/FULL OK"
		elif [ "$3" = "100M/HALF" ]; then
			tce miiw 7 0 3100
			sleep 1
			tce miiw 7 0 2000
			sleep 1
			echo "Set 100M/HALF OK"
		elif [ "$3" = "10M/FULL" ]; then
			tce miiw 7 0 3100
			sleep 1
			tce miiw 7 0 0100
			sleep 1
			echo "Set 10M/FULL OK"
		elif [ "$3" = "10M/HALF" ]; then
			tce miiw 7 0 3100
			sleep 1
			tce miiw 7 0 0000
			sleep 1
			echo "Set 10M/HALF OK"
		else
			echo "cli gigaether set <1000M/FUll,1000M/HALF,100M/FULL,100M/HALF,10M/FULL,10M/HALF>"
                fi
                ;;
        *)
                echo "usage: cli gigaether {get|set <value>}"
                ;;
        esac
        ;;

wlan_tx|WLAN_TX)
	if [ $# -lt 9 ]; then
                    echo "Usage:"
                    echo "cli wlan_tx <channel> <txmode> <mcstype> <ht> <ant> <power0> <power1> <fre_offset>"
            exit 1
        fi
        
	iwpriv ra0 set ATE=ATESTART
	iwpriv ra0 set ATEDA=00:11:22:33:44:55
	iwpriv ra0 set ATESA=00:aa:bb:cc:dd:ee
	iwpriv ra0 set ATEBSSID=00:11:22:33:44:55
	iwpriv ra0 set ATECHANNEL=$2
	iwpriv ra0 set ATETXMODE=$3
	iwpriv ra0 set ATETXMCS=$4
	iwpriv ra0 set ATETXBW=$5
	iwpriv ra0 set ATETXGI=0
	iwpriv ra0 set ATETXLEN=1024
	iwpriv ra0 set ATETXANT=$6
	iwpriv ra0 set ATETXPOW0=$7
	iwpriv ra0 set ATETXPOW1=$8
	iwpriv ra0 set ATETXFREQOFFSET=$9
	iwpriv ra0 set ATETXCNT=100000000
	iwpriv ra0 set ATE=TXFRAME
	;;

wlan_rx|WLAN_RX)
        if [ $# -lt 7 ]; then
                    echo "Usage:"
                    echo "cli wlan_rx <channel> <fre_offset> <txmode> <mcstype> <ht> <ant>"
            exit 1
        fi
        iwpriv ra0 set ATE=ATESTART
        iwpriv ra0 set ATECHANNEL=$2
        iwpriv ra0 set ATETXFREQOFFSET=$3
        iwpriv ra0 set ResetCounter=0
        iwpriv ra0 set ATETXMODE=$4
        iwpriv ra0 set ATETXMCS=$5
        iwpriv ra0 set ATETXBW=$6
        iwpriv ra0 set ATERXANT=$7
        iwpriv ra0 set ATERXFER=1
        iwpriv ra0 set ATE=RXFRAME
        ;;

wlan11ac_tx|WLAN11AC_TX)
	if [ $# -lt 9 ]; then
                    echo "Usage:"
                    echo "cli wlan11ac_tx <channel> <txmode> <mcstype> <ht> <ant> <power0> <fre_offset>"
            exit 1
        fi
        
	iwpriv rai0 set ATE=ATESTART
	iwpriv rai0 set ATEDA=00:11:22:33:44:55
	iwpriv rai0 set ATESA=00:aa:bb:cc:dd:ee
	iwpriv rai0 set ATEBSSID=00:11:22:33:44:55
	iwpriv rai0 set ATECHANNEL=$2
	iwpriv rai0 set ATETXMODE=$3
	iwpriv rai0 set ATETXMCS=$4
	iwpriv rai0 set ATETXBW=$5
	iwpriv rai0 set ATETXGI=0
	iwpriv rai0 set ATETXLEN=1024
	iwpriv rai0 set ATETXANT=$6
	iwpriv rai0 set ATETXPOW0=$7
	iwpriv rai0 set ATETXFREQOFFSET=$8
	iwpriv rai0 set ATETXCNT=100000000
	iwpriv rai0 set ATE=TXFRAME
	;;

wlan11ac_rx|WLAN11AC_RX)
        if [ $# -lt 7 ]; then
                    echo "Usage:"
                    echo "cli wlan11ac_rx <channel> <fre_offset> <txmode> <mcstype> <ht> <ant>"
            exit 1
        fi
        iwpriv rai0 set ATE=ATESTART
        iwpriv rai0 set ATECHANNEL=$2
        iwpriv rai0 set ATETXFREQOFFSET=$3
        iwpriv rai0 set ResetCounter=0
        iwpriv rai0 set ATETXMODE=$4
        iwpriv rai0 set ATETXMCS=$5
        iwpriv rai0 set ATETXBW=$6
        iwpriv rai0 set ATERXANT=$7
        iwpriv rai0 set ATERXFER=1
        iwpriv rai0 set ATE=RXFRAME
        ;;


*)
        echo "usage: "
        echo "  cli fwversion get"
    	echo "  cli hwversion {get|set <value>}"
        echo "  cli ledtest set {on|off}"
        echo "  cli keydetect set {on|off}"
        echo "  cli mac set <XX:XX:XX:XX:XX:XX>"
        echo "  cli mac get"
        echo "  cli config set default"
        echo "  cli usb get"
        echo "  cli adslbridge set"
        echo "  cli etherbridge set"
        echo "  cli checkadslmode"
        echo "  cli adsl get {speed|status}"
        echo "  cli wlan {get|set default <psk> <password> <countrycode>}"
        echo "  cli wlan {get|set ssid <value>}"
        echo "  cli wlan {get|set channel <value>}"
        echo "  cli wlan {get|set bw <value>}"
        echo "  cli wlan_tx <channel> <txmode> <mcstype> <ht> <ant> <power0> <power1> <fre_offset>"
		echo "  cli wlan_rx <channel> <fre_offset> <txmode> <mcstype> <ht> <ant>"
        echo "  cli wlan11ac_tx <channel> <txmode> <mcstype> <ht> <ant> <power0> <fre_offset>"
		echo "  cli wlan11ac_rx <channel> <fre_offset> <txmode> <mcstype> <ht> <ant>"
        echo "  cli testwlan set on"
        echo "  cli wlan11ac {get|set default <psk> <countrycode>}"
        echo "  cli wlan11ac {get|set ssid <value>}"
        echo "  cli wlan11ac {get|set channel <value>}"
        echo "  cli testwlan11ac set on"
        echo "  cli serialnumber get"
        echo "  cli serialnumber set <value>"
        echo "  cli gigaether {get|set <value>}"
        ;;
esac

exit 0
