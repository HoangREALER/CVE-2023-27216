#!/bin/sh

#This is the lib for shell function

SCH_DIR=/var/tmp/schedule
setIptableWithSch()
{
  SCH_FILE="$SCH_DIR"/"$1"
  if [ -f "$SCH_FILE" ]; then
    SCH_NUM=`sed -n '$=' $SCH_FILE`
    INDEX=1
    while [ "$INDEX" -le "$SCH_NUM" ];do
      LINE=`sed -n ${INDEX}p $SCH_FILE`
#      echo "LINE is $LINE"
      TIME_ARG=""
      if [ -n "$LINE" ]; then
        TMP=`echo "$LINE" | sed -n '/-/p'`
        if [ -n "$TMP" ]; then
          START_TIME=`echo "$LINE" | awk -F"[-]" '{print $1}'`
          END_TIME=`echo "$LINE" | awk -F"[-]" '{print $2}'`
          DAY=`echo "$LINE" | awk -F"[-]" '{print $3}'`
          if [ -n "$START_TIME" ] && [ -n "$END_TIME" ] && [ -n "$DAY" ]; then
            START_TIME="$START_TIME":00
            END_TIME="$END_TIME":00
            TIME_ARG=" -m time --timestart $START_TIME --timestop $END_TIME --days $DAY "
          else
            echo "parse time fail"
          fi
        else
          DAY=$LINE
          TIME_ARG=" -m time --days $DAY "
        fi
      fi
#      echo "TIME_ARG is $TIME_ARG"
      if [ -n "$TIME_ARG" ]; then
        setIptableCmd $*;
      fi
      INDEX=`expr $INDEX + 1`
    done
  else
    TIME_ARG=""
    setIptableCmd $*;
  fi
}

OAM_INF_FILE=/var/tmp/oam_inf

doStartOam()
{
  if [ -z "$1" ]; then
    return
  fi

  killall -9 oam_eci
  sleep 1
  echo "$1" > $OAM_INF_FILE
  /userfs/bin/oam_eci -d -w nas$1 &
}

startOam()
{
  doStartOam $1;
}

failstartOam()
{
  if [ -z "$1" ]; then
    echo "no inf"
    return
  fi

  if [ ! -f "$OAM_INF_FILE" ]; then
    echo "first run"
    doStartOam $1;
    return
  fi

  OAM_INF_IDX=`cat $OAM_INF_FILE`
  if [ "$OAM_INF_IDX" -eq "$1" ]; then
    echo "same inf, check process"
    OAM_TMP=`ps | sed -n '/oam_eci/p' | sed -n "/nas${OAM_INF_IDX}/p"`
    if [ -z "$OAM_TMP" ]; then
      echo "start oam again"
      doStartOam $1;
    fi
    return
  fi

  if [ "$1" -eq "8" ]; then
    echo "into ptm"
    doStartOam $1;
  elif [ "$1" -ge "0" ] && [ "$1" -le "7" ]; then
    if [ "$OAM_INF_IDX" -eq "8" ]; then
      echo "into atm"
      doStartOam $1;
      return
    else
      ifconfig nas${OAM_INF_IDX}
      if [ "$?" -ne "0" ]; then
        echo "stat oam for new inf"
        doStartOam $1;
        return
      fi
      OAM_TMP=`ps | sed -n '/oam_eci/p' | sed -n "/nas${OAM_INF_IDX}/p"`
      if [ -z "$OAM_TMP" ]; then
        echo "start oam again2"
        doStartOam $1;
      fi
    fi
  else
    echo "unknown wan type"
  fi
}

stopCfm()
{
  killall -9 cfm
  sleep 1
}

CFM_INF_FILE=/var/tmp/cfm_inf
doStartCfm()
{
  if [ -z "$1" ]; then
    return
  fi
    stopCfm;
    echo $1 > /var/tmp/cfm/wan_if
    echo $1 > $CFM_INF_FILE
    /userfs/bin/cfm -d -e -w -i nas$1 &
}

startCfm()
{
  doStartCfm $1;
}

failstartCfm()
{
  if [ -z "$1" ]; then
    echo "no inf"
    return
  fi

  if [ ! -f "$CFM_INF_FILE" ]; then
    echo "first run cfm"
    doStartCfm $1;
    return
  fi

  CFM_INF_IDX=`cat $CFM_INF_FILE`
  if [ "$CFM_INF_IDX" -eq "$1" ]; then
    echo "same inf, check process"
    CFM_TMP=`ps | sed -n '/cfm/p' | sed -n "/nas${CFM_INF_IDX}/p"`
    if [ -z "$CFM_TMP" ]; then
      echo "start cfm again"
      doStartCfm $1;
    fi
    return
  fi

  if [ "$1" -eq "8" ]; then
    echo "cfm into ptm"
    doStartCfm $1;
  elif [ "$1" -ge "0" ] && [ "$1" -le "7" ]; then
    if [ "$CFM_INF_IDX" -eq "8" ]; then
      echo "cfm into atm"
      doStartCfm $1;
      return
    else
      ifconfig nas${CFM_INF_IDX}
      if [ "$?" -ne "0" ]; then
        echo "stat cfm for new inf"
        doStartCfm $1;
        return
      fi
      CFM_TMP=`ps | sed -n '/cfm/p' | sed -n "/nas${CFM_INF_IDX}/p"`
      if [ -z "$CFM_TMP" ]; then
        echo "start cfm again2"
        doStartCfm $1;
      fi
    fi
  else
    echo "cfm unknown wan type"
  fi
}


NET_DEV_FILE=/proc/net/dev
PVC_FILE=/var/tmp/pvc_mac
PVC_TMP_FILE=${PVC_FILE}.tmp
savePvcMac()
{
  echo "0" > $PVC_FILE

  if [ -z "$1" ] || [ ! -f "$NET_DEV_FILE" ]; then
    echo "No pvc"
    return
  fi

  PVC_NUM=$1
  if [ "$PVC_NUM" -eq "8" ]; then
    PVC_INFS=`cat $NET_DEV_FILE | sed -n /nas8_/p | sed -n 's/:.*//gp' | sed -n 's/^[ \t]*//gp'`
  elif [ "$PVC_NUM" -ge "0" ] && [ "$PVC_NUM" -le "7" ]; then
    PVC_INFS=`cat $NET_DEV_FILE | sed -n /nas[0-7]:/p | sed -n 's/:.*//gp' | sed -n 's/^[ \t]*//gp'`
  else
    echo "unknown pvc"
    return
  fi

  if [ -z "$PVC_INFS" ]; then
    echo "no valid pvc"
    return
  fi
  PVC_TOTAL=0
  echo "" > $PVC_TMP_FILE
  for PVC_INF in $PVC_INFS
   do
    PVC_MAC=`ifconfig $PVC_INF | sed -n '/HWaddr/p' | sed -n 's/[ \t]//gp' | sed -n 's/^.*HWaddr//gp'`
    if [ -n "$PVC_MAC" ]; then
      PVC_TOTAL=`expr $PVC_TOTAL + 1`
      echo "$PVC_MAC" >> $PVC_TMP_FILE
    fi
   done
  if [ "$PVC_TOTAL" -gt "0" ]; then
    echo "${PVC_TOTAL}`cat $PVC_TMP_FILE`" > $PVC_FILE
  fi
  if [ -f "$PVC_TMP_FILE" ]; then
    rm -f $PVC_TMP_FILE
  fi
}
